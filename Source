//hangman
//classic game of hangman

#include<iostream>
#include<string>
#include<vector>
#include<algorithm>
#include<ctime>
#include<cctype>

using namespace std;

int main()
{
	//setup
	const int MAX_WRONG = 8; //maximum number of bad guesses

	vector<string> words;//collections of possible words to guess
	words.push_back("GUESS");
	words.push_back("HANGMAN");
	words.push_back("DIFFICULT");

	srand(static_cast<unsigned int>(time(0)));
	random_shuffle(words.begin(), words.end());
	const string THE_WORD = words[0];//word to guess
	int wrong = 0;//number of incorrect guesses
	string soFar(THE_WORD.size(), '-');//word guessed so far
	string used = "";//letters already guessed

	cout << "Welcome to hangman good luck\n";

	//main loop
	while ((wrong < MAX_WRONG) && (soFar != THE_WORD))
	{
		cout << "\n\nyou have " << (MAX_WRONG - wrong);
		cout << "Incorrect guesses left\n";
		cout << "You have used the following letters\n" << used << endl;
		cout << "\nso far the word is " << soFar << endl;

		char guess;
		cout << "\n\nEnter your guess ";
		cin >> guess;
		guess = toupper(guess);//make uppercase since secret word is uppercase
		while (used.find(guess) != string::npos)
		{
			cout << "\nYouve already guessed " << guess << endl;
			cout << "enter your guess ";
			cin >> guess;
			guess = toupper(guess);
		}

		used += guess;

		if (THE_WORD.find(guess) != string::npos)
		{
			cout << "Thats right " << guess << " is in the word\n";

			//update soFar to include newly guessed letter
			for (int i = 0; i < THE_WORD.length(); i++)
			{
				if (THE_WORD[i] == guess)
				{
					soFar[i] = guess;
				}
			}
		}
		else
		{
			cout << "Sorry " << guess << " isnt in the word\n";
			wrong++;
		}
	}

	//shutdown
	if (wrong == MAX_WRONG)
	{
		cout << "Youve been hanged";
	}
	else
	{
		cout << "Youve guessed it";
	}

	cout << "The word was " << THE_WORD << endl;

	return 0;
}
